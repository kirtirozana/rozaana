<?php
/**
 * menubuilder/menu/edit/form.phtml
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Licence that is bundled with 
 * this package in the file LICENSE.txt. It is also available through 
 * the world-wide-web at this URL: http://www.tsdesigns.de/license
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@tsdesigns.de so we can send you a copy immediately.
 *
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this extension to newer
 * versions in the future. If you wish to customize Magento or this extension for your
 * needs please refer to http://www.magentocommerce.com or http://www.tsdesigns.de
 * for more information.
 * 
 *
 * @category TSDesigns
 * @package TSDesigns_MenuBuilder
 * @author Tobias Schifftner, TSDesigns
 * @license http://www.tsdesigns.de/license
 * @copyright This software is protected by copyright, (c) 2011 TSDesigns.
 * @version 1.6.0 - 2011-10-21 10:31:26
 *
 */
?>


<div class="content-header">
        <h3 class="icon-head head-categories"><?php echo $this->getHeader() . ($this->getMenuId() ? ' (' . Mage::helper('menubuilder')->__('ID: %s', $this->getMenuId()) . ')' : '') ?></h3>
        <p class="content-buttons form-buttons">
            <?php echo $this->getResetButtonHtml() ?>
            <?php if($this->getMenuId()): ?>
                    <?php echo $this->getDeleteButtonHtml() ?>
            <?php endif; ?>
            <?php echo $this->getAdditionalButtonsHtml(); ?>
            <?php echo $this->getSaveButtonHtml() ?>
        </p>
</div>
<?php if($this->hasRootMenu()): ?>
    <?php echo $this->getTabsHtml() ?>
<?php else: ?>
<div class="messages warning-msg">
    <?php echo Mage::helper('menubuilder')->__('Set root menu for this store in the <a href="%s">configuration</a>', $this->getStoreConfigurationUrl()) ?>
</div>
<?php endif; ?>
<iframe name="iframeSave" style="display:none; width:100%;" src="<?php echo $this->getJsUrl() ?>tsdesigns/blank.html"></iframe>
<div id="menu_edit_form_alt">
<form target="iframeSave" id="menu_edit_form" action="<?php echo $this->getSaveUrl() ?>" method="post" enctype="multipart/form-data">
    <div class="no-display">
    	<input type="hidden" name="isIframe" value="1" />
    	<input name="form_key" type="hidden" value="<?php echo $this->getFormKey() ?>" />    
        <input type="hidden" name="menu_products" id="in_menu_products" value="" />
        <input type="hidden" name="active_tab_id" id="active_tab_id" value="" />
    </div>
    <div id="menu_tab_content"></div>
</form>
</div>
<script type="text/javascript">
//<![CDATA[
    menuForm = new varienForm('menu_edit_form');

    menuForm.submit= function (url) {
        this.errorSections = $H({});
        this.canShowError = true;
        this.submitUrl = url;
        if (this.validator && this.validator.validate()) {
            if(this.validationUrl){
                this._validate();
            }
            else{
                this._submit();
            }
            displayLoadingMask();
            return true;
        }
        return false;
    };

    function menuNodeSubmit(url) {
        var activeTab = $('active_tab_id');
        if (activeTab) {
            if (activeTab.tabsJsObject && activeTab.tabsJsObject.activeTab) {
                activeTab.value = activeTab.tabsJsObject.activeTab.id;
            }
        }

        var params = {};
        //var fields = $('menu_edit_form').getElementsBySelector('input', 'select');
        /* Fix for IE 9, Chome, Safari */
        var fields = $('menu_edit_form_alt').getElementsBySelector('input', 'select');
        for(var i=0;i<fields.length;i++){
            if (!fields[i].name) {
                continue;
            }
            params[fields[i].name] = fields[i].getValue();
        }

        if( ! params['general[id]']) {
			// creating node
			var parentId = params['general[path]'];
            if (!tree.currentNodeId) {
                // First submit of form - select some node to be current
                tree.currentNodeId = parentId;
            }
            tree.addNodeTo = parentId;
        }

		//console.log(params);
		//console.log(tree.currentNodeId);
		//console.log(tree.addNodeTo);
		//return;
		
        //var fields = $('menu_edit_form').getElementsBySelector('input', 'select');
        //var fields = $('menu_edit_form').select('input');
        //fields = fields.concat($('menu_edit_form').select('select'));
        //var fields = $('menu_edit_form').select('input');
      
        if (tree && !tree.addNodeTo) {
            var currentNode = tree.getNodeById(tree.currentNodeId);

            if (currentNode) {

                // Active / Inactive
                if (params['general[is_active]'] == 1) {
                    var oldClass = 'no-active-category';
                    var newClass = 'active-category';
                } else {
                    var oldClass = 'active-category';
                    var newClass = 'no-active-category';
                }

                Element.removeClassName(currentNode.ui.wrap.firstChild, oldClass);
                Element.addClassName(currentNode.ui.wrap.firstChild, newClass);

				// Icon
				var classes = new Array('tree-node-nowhere', 'tree-node-product', 'tree-node-external', 'tree-node-internal', 'tree-node-cms-page', 'tree-node-cms_page', 'tree-node-category');
				var iconNode = Ext.get(currentNode.getUI().iconNode);

				classes.each(function(name){
					Ext.get(currentNode.getUI().iconNode).removeClass(name);
				});
				
				iconNode.addClass('tree-node-' + params['general[link_to]']);
				
                var name = currentNode.text || '';

                if (!name.match(/(\(\d+\))/)) {
                   name = params['general[name]'];
                } else {
                    name = name.replace(/(.+)\(/,params['general[name]']+' (');
                }
                currentNode.setText(name);
            }
        }

        /**
         * We submit first loaded form
         */
        if (!tree.currentNodeId) {
            tree.currentNodeId = tree.root.id;
            tree.addNodeTo = tree.currentNodeId;
        }
        menuForm.submit();
    }

<?php if($this->isAjax() && ($block = $this->getLayout()->getBlock('tabs')) && ($_tabsJsObject=$block->getJsObjectName())): ?>
    <?php echo $_tabsJsObject ?>.moveTabContentInDest();
    if (<?php echo $_tabsJsObject ?>.activeTab) {
        $('active_tab_id').value = <?php echo $_tabsJsObject ?>.activeTab.id;
    }
    $('active_tab_id').tabsJsObject = <?php echo $_tabsJsObject ?>;
<?php endif; ?>

updateTopButtonToolbarToggle();

function bindAttributeInputType()
{
    //checkOptionsPanelVisibility();
    switchDefaultValueField();
}


function switchDefaultValueField()
{
    if (!$('link_to')) {
        return;
    }

    var currentValue = $('link_to').value;
    var link_types = ['category', 'product', 'cms_page', 'internal', 'external'];
    link_types.each(function(item) {
        var id = 'link_to_' + item;
        if(currentValue == item) {
    		setRowVisibility(id, true);
        } else {
        	setRowVisibility(id, false);
        }
    });
}

function setRowVisibility(id, isVisible)
{
    if ($(id)) {
        var td = $(id).parentNode;
        var tr = $(td.parentNode);

        if (isVisible) {
            tr.show();
        } else {
            tr.blur();
            tr.hide();
        }
    }
}

function updateRequiredOptions()
{
    if ($F('link_to')=='select' && $F('is_required')==1) {
        $('option-count-check').addClassName('required-options-count');
    } else {
        $('option-count-check').removeClassName('required-options-count');
    }
}

if($('link_to')){
    //Event.observe($('link_to'), 'change', updateRequiredOptions);
    Event.observe($('link_to'), 'change', switchDefaultValueField);
}

switchDefaultValueField();


//]]>
</script>